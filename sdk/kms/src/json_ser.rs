// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_key_deletion_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelKeyDeletionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.key_id {
        object.key("KeyId").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_connect_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConnectCustomKeyStoreInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.alias_name {
        object.key("AliasName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.target_key_id {
        object.key("TargetKeyId").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomKeyStoreInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.trust_anchor_certificate {
        object.key("TrustAnchorCertificate").string(var_7.as_str());
    }
    if let Some(var_8) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_grant_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGrantInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.key_id {
        object.key("KeyId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_10.as_str());
    }
    if let Some(var_11) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_11.as_str());
    }
    if let Some(var_12) = &input.operations {
        let mut array_13 = object.key("Operations").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.constraints {
        let mut object_16 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_grant_constraints(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.grant_tokens {
        let mut array_18 = object.key("GrantTokens").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.policy {
        object.key("Policy").string(var_21.as_str());
    }
    if let Some(var_22) = &input.description {
        object.key("Description").string(var_22.as_str());
    }
    if let Some(var_23) = &input.key_usage {
        object.key("KeyUsage").string(var_23.as_str());
    }
    if let Some(var_24) = &input.customer_master_key_spec {
        object.key("CustomerMasterKeySpec").string(var_24.as_str());
    }
    if let Some(var_25) = &input.key_spec {
        object.key("KeySpec").string(var_25.as_str());
    }
    if let Some(var_26) = &input.origin {
        object.key("Origin").string(var_26.as_str());
    }
    if let Some(var_27) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_27.as_str());
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.multi_region {
        object.key("MultiRegion").boolean(*var_32);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decrypt_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DecryptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.ciphertext_blob {
        object
            .key("CiphertextBlob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_33));
    }
    if let Some(var_34) = &input.encryption_context {
        let mut object_35 = object.key("EncryptionContext").start_object();
        for (key_36, value_37) in var_34 {
            {
                object_35.key(key_36).string(value_37.as_str());
            }
        }
        object_35.finish();
    }
    if let Some(var_38) = &input.grant_tokens {
        let mut array_39 = object.key("GrantTokens").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.key_id {
        object.key("KeyId").string(var_41.as_str());
    }
    if let Some(var_42) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_42.as_str());
    }
    if let Some(var_43) = &input.recipient {
        let mut object_44 = object.key("Recipient").start_object();
        crate::json_ser::serialize_structure_crate_model_recipient_info(&mut object_44, var_43)?;
        object_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.alias_name {
        object.key("AliasName").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCustomKeyStoreInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_imported_key_material_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImportedKeyMaterialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.key_id {
        object.key("KeyId").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_custom_key_stores_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCustomKeyStoresInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_49.as_str());
    }
    if let Some(var_50) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    if let Some(var_51) = &input.marker {
        object.key("Marker").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.key_id {
        object.key("KeyId").string(var_52.as_str());
    }
    if let Some(var_53) = &input.grant_tokens {
        let mut array_54 = object.key("GrantTokens").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55.as_str());
            }
        }
        array_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.key_id {
        object.key("KeyId").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_key_rotation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableKeyRotationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.key_id {
        object.key("KeyId").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disconnect_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectCustomKeyStoreInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.key_id {
        object.key("KeyId").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_key_rotation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableKeyRotationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.key_id {
        object.key("KeyId").string(var_60.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_encrypt_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EncryptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.key_id {
        object.key("KeyId").string(var_61.as_str());
    }
    if let Some(var_62) = &input.plaintext {
        object
            .key("Plaintext")
            .string_unchecked(&aws_smithy_types::base64::encode(var_62));
    }
    if let Some(var_63) = &input.encryption_context {
        let mut object_64 = object.key("EncryptionContext").start_object();
        for (key_65, value_66) in var_63 {
            {
                object_64.key(key_65).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.grant_tokens {
        let mut array_68 = object.key("GrantTokens").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    if let Some(var_70) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.key_id {
        object.key("KeyId").string(var_71.as_str());
    }
    if let Some(var_72) = &input.encryption_context {
        let mut object_73 = object.key("EncryptionContext").start_object();
        for (key_74, value_75) in var_72 {
            {
                object_73.key(key_74).string(value_75.as_str());
            }
        }
        object_73.finish();
    }
    if let Some(var_76) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_76).into()),
        );
    }
    if let Some(var_77) = &input.recipient {
        let mut object_78 = object.key("Recipient").start_object();
        crate::json_ser::serialize_structure_crate_model_recipient_info(&mut object_78, var_77)?;
        object_78.finish();
    }
    if let Some(var_79) = &input.key_spec {
        object.key("KeySpec").string(var_79.as_str());
    }
    if let Some(var_80) = &input.grant_tokens {
        let mut array_81 = object.key("GrantTokens").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_pair_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyPairInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.encryption_context {
        let mut object_84 = object.key("EncryptionContext").start_object();
        for (key_85, value_86) in var_83 {
            {
                object_84.key(key_85).string(value_86.as_str());
            }
        }
        object_84.finish();
    }
    if let Some(var_87) = &input.key_id {
        object.key("KeyId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_88.as_str());
    }
    if let Some(var_89) = &input.grant_tokens {
        let mut array_90 = object.key("GrantTokens").start_array();
        for item_91 in var_89 {
            {
                array_90.value().string(item_91.as_str());
            }
        }
        array_90.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_pair_without_plaintext_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyPairWithoutPlaintextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.encryption_context {
        let mut object_93 = object.key("EncryptionContext").start_object();
        for (key_94, value_95) in var_92 {
            {
                object_93.key(key_94).string(value_95.as_str());
            }
        }
        object_93.finish();
    }
    if let Some(var_96) = &input.key_id {
        object.key("KeyId").string(var_96.as_str());
    }
    if let Some(var_97) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_97.as_str());
    }
    if let Some(var_98) = &input.grant_tokens {
        let mut array_99 = object.key("GrantTokens").start_array();
        for item_100 in var_98 {
            {
                array_99.value().string(item_100.as_str());
            }
        }
        array_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_without_plaintext_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyWithoutPlaintextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.key_id {
        object.key("KeyId").string(var_101.as_str());
    }
    if let Some(var_102) = &input.encryption_context {
        let mut object_103 = object.key("EncryptionContext").start_object();
        for (key_104, value_105) in var_102 {
            {
                object_103.key(key_104).string(value_105.as_str());
            }
        }
        object_103.finish();
    }
    if let Some(var_106) = &input.key_spec {
        object.key("KeySpec").string(var_106.as_str());
    }
    if let Some(var_107) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_107).into()),
        );
    }
    if let Some(var_108) = &input.grant_tokens {
        let mut array_109 = object.key("GrantTokens").start_array();
        for item_110 in var_108 {
            {
                array_109.value().string(item_110.as_str());
            }
        }
        array_109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_mac_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateMacInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.message {
        object
            .key("Message")
            .string_unchecked(&aws_smithy_types::base64::encode(var_111));
    }
    if let Some(var_112) = &input.key_id {
        object.key("KeyId").string(var_112.as_str());
    }
    if let Some(var_113) = &input.mac_algorithm {
        object.key("MacAlgorithm").string(var_113.as_str());
    }
    if let Some(var_114) = &input.grant_tokens {
        let mut array_115 = object.key("GrantTokens").start_array();
        for item_116 in var_114 {
            {
                array_115.value().string(item_116.as_str());
            }
        }
        array_115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_random_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateRandomInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    if let Some(var_118) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.recipient {
        let mut object_120 = object.key("Recipient").start_object();
        crate::json_ser::serialize_structure_crate_model_recipient_info(&mut object_120, var_119)?;
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_key_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.key_id {
        object.key("KeyId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.policy_name {
        object.key("PolicyName").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_key_rotation_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyRotationStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.key_id {
        object.key("KeyId").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_for_import_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersForImportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.key_id {
        object.key("KeyId").string(var_124.as_str());
    }
    if let Some(var_125) = &input.wrapping_algorithm {
        object.key("WrappingAlgorithm").string(var_125.as_str());
    }
    if let Some(var_126) = &input.wrapping_key_spec {
        object.key("WrappingKeySpec").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPublicKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.key_id {
        object.key("KeyId").string(var_127.as_str());
    }
    if let Some(var_128) = &input.grant_tokens {
        let mut array_129 = object.key("GrantTokens").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130.as_str());
            }
        }
        array_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_key_material_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportKeyMaterialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.key_id {
        object.key("KeyId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.import_token {
        object
            .key("ImportToken")
            .string_unchecked(&aws_smithy_types::base64::encode(var_132));
    }
    if let Some(var_133) = &input.encrypted_key_material {
        object
            .key("EncryptedKeyMaterial")
            .string_unchecked(&aws_smithy_types::base64::encode(var_133));
    }
    if let Some(var_134) = &input.valid_to {
        object
            .key("ValidTo")
            .date_time(var_134, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_135) = &input.expiration_model {
        object.key("ExpirationModel").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.key_id {
        object.key("KeyId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_137).into()),
        );
    }
    if let Some(var_138) = &input.marker {
        object.key("Marker").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_grants_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGrantsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_139).into()),
        );
    }
    if let Some(var_140) = &input.marker {
        object.key("Marker").string(var_140.as_str());
    }
    if let Some(var_141) = &input.key_id {
        object.key("KeyId").string(var_141.as_str());
    }
    if let Some(var_142) = &input.grant_id {
        object.key("GrantId").string(var_142.as_str());
    }
    if let Some(var_143) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_key_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeyPoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.key_id {
        object.key("KeyId").string(var_144.as_str());
    }
    if let Some(var_145) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    if let Some(var_146) = &input.marker {
        object.key("Marker").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_keys_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeysInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.marker {
        object.key("Marker").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.key_id {
        object.key("KeyId").string(var_149.as_str());
    }
    if let Some(var_150) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    if let Some(var_151) = &input.marker {
        object.key("Marker").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_retirable_grants_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRetirableGrantsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    if let Some(var_153) = &input.marker {
        object.key("Marker").string(var_153.as_str());
    }
    if let Some(var_154) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_key_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutKeyPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.key_id {
        object.key("KeyId").string(var_155.as_str());
    }
    if let Some(var_156) = &input.policy_name {
        object.key("PolicyName").string(var_156.as_str());
    }
    if let Some(var_157) = &input.policy {
        object.key("Policy").string(var_157.as_str());
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_re_encrypt_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReEncryptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.ciphertext_blob {
        object
            .key("CiphertextBlob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_158));
    }
    if let Some(var_159) = &input.source_encryption_context {
        let mut object_160 = object.key("SourceEncryptionContext").start_object();
        for (key_161, value_162) in var_159 {
            {
                object_160.key(key_161).string(value_162.as_str());
            }
        }
        object_160.finish();
    }
    if let Some(var_163) = &input.source_key_id {
        object.key("SourceKeyId").string(var_163.as_str());
    }
    if let Some(var_164) = &input.destination_key_id {
        object.key("DestinationKeyId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.destination_encryption_context {
        let mut object_166 = object.key("DestinationEncryptionContext").start_object();
        for (key_167, value_168) in var_165 {
            {
                object_166.key(key_167).string(value_168.as_str());
            }
        }
        object_166.finish();
    }
    if let Some(var_169) = &input.source_encryption_algorithm {
        object
            .key("SourceEncryptionAlgorithm")
            .string(var_169.as_str());
    }
    if let Some(var_170) = &input.destination_encryption_algorithm {
        object
            .key("DestinationEncryptionAlgorithm")
            .string(var_170.as_str());
    }
    if let Some(var_171) = &input.grant_tokens {
        let mut array_172 = object.key("GrantTokens").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173.as_str());
            }
        }
        array_172.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_replicate_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReplicateKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.key_id {
        object.key("KeyId").string(var_174.as_str());
    }
    if let Some(var_175) = &input.replica_region {
        object.key("ReplicaRegion").string(var_175.as_str());
    }
    if let Some(var_176) = &input.policy {
        object.key("Policy").string(var_176.as_str());
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
    if let Some(var_177) = &input.description {
        object.key("Description").string(var_177.as_str());
    }
    if let Some(var_178) = &input.tags {
        let mut array_179 = object.key("Tags").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_181, item_180)?;
                object_181.finish();
            }
        }
        array_179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retire_grant_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetireGrantInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.grant_token {
        object.key("GrantToken").string(var_182.as_str());
    }
    if let Some(var_183) = &input.key_id {
        object.key("KeyId").string(var_183.as_str());
    }
    if let Some(var_184) = &input.grant_id {
        object.key("GrantId").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_grant_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokeGrantInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.key_id {
        object.key("KeyId").string(var_185.as_str());
    }
    if let Some(var_186) = &input.grant_id {
        object.key("GrantId").string(var_186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_schedule_key_deletion_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ScheduleKeyDeletionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.key_id {
        object.key("KeyId").string(var_187.as_str());
    }
    if let Some(var_188) = &input.pending_window_in_days {
        object.key("PendingWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_188).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_sign_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SignInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.key_id {
        object.key("KeyId").string(var_189.as_str());
    }
    if let Some(var_190) = &input.message {
        object
            .key("Message")
            .string_unchecked(&aws_smithy_types::base64::encode(var_190));
    }
    if let Some(var_191) = &input.message_type {
        object.key("MessageType").string(var_191.as_str());
    }
    if let Some(var_192) = &input.grant_tokens {
        let mut array_193 = object.key("GrantTokens").start_array();
        for item_194 in var_192 {
            {
                array_193.value().string(item_194.as_str());
            }
        }
        array_193.finish();
    }
    if let Some(var_195) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.key_id {
        object.key("KeyId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.tags {
        let mut array_198 = object.key("Tags").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_200, item_199)?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.key_id {
        object.key("KeyId").string(var_201.as_str());
    }
    if let Some(var_202) = &input.tag_keys {
        let mut array_203 = object.key("TagKeys").start_array();
        for item_204 in var_202 {
            {
                array_203.value().string(item_204.as_str());
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.alias_name {
        object.key("AliasName").string(var_205.as_str());
    }
    if let Some(var_206) = &input.target_key_id {
        object.key("TargetKeyId").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomKeyStoreInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.new_custom_key_store_name {
        object.key("NewCustomKeyStoreName").string(var_208.as_str());
    }
    if let Some(var_209) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_209.as_str());
    }
    if let Some(var_210) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_key_description_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateKeyDescriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.key_id {
        object.key("KeyId").string(var_211.as_str());
    }
    if let Some(var_212) = &input.description {
        object.key("Description").string(var_212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_primary_region_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePrimaryRegionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.key_id {
        object.key("KeyId").string(var_213.as_str());
    }
    if let Some(var_214) = &input.primary_region {
        object.key("PrimaryRegion").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::VerifyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.key_id {
        object.key("KeyId").string(var_215.as_str());
    }
    if let Some(var_216) = &input.message {
        object
            .key("Message")
            .string_unchecked(&aws_smithy_types::base64::encode(var_216));
    }
    if let Some(var_217) = &input.message_type {
        object.key("MessageType").string(var_217.as_str());
    }
    if let Some(var_218) = &input.signature {
        object
            .key("Signature")
            .string_unchecked(&aws_smithy_types::base64::encode(var_218));
    }
    if let Some(var_219) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_219.as_str());
    }
    if let Some(var_220) = &input.grant_tokens {
        let mut array_221 = object.key("GrantTokens").start_array();
        for item_222 in var_220 {
            {
                array_221.value().string(item_222.as_str());
            }
        }
        array_221.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_mac_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::VerifyMacInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.message {
        object
            .key("Message")
            .string_unchecked(&aws_smithy_types::base64::encode(var_223));
    }
    if let Some(var_224) = &input.key_id {
        object.key("KeyId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.mac_algorithm {
        object.key("MacAlgorithm").string(var_225.as_str());
    }
    if let Some(var_226) = &input.mac {
        object
            .key("Mac")
            .string_unchecked(&aws_smithy_types::base64::encode(var_226));
    }
    if let Some(var_227) = &input.grant_tokens {
        let mut array_228 = object.key("GrantTokens").start_array();
        for item_229 in var_227 {
            {
                array_228.value().string(item_229.as_str());
            }
        }
        array_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grant_constraints(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrantConstraints,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.encryption_context_subset {
        let mut object_231 = object.key("EncryptionContextSubset").start_object();
        for (key_232, value_233) in var_230 {
            {
                object_231.key(key_232).string(value_233.as_str());
            }
        }
        object_231.finish();
    }
    if let Some(var_234) = &input.encryption_context_equals {
        let mut object_235 = object.key("EncryptionContextEquals").start_object();
        for (key_236, value_237) in var_234 {
            {
                object_235.key(key_236).string(value_237.as_str());
            }
        }
        object_235.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.tag_key {
        object.key("TagKey").string(var_238.as_str());
    }
    if let Some(var_239) = &input.tag_value {
        object.key("TagValue").string(var_239.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recipient_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecipientInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.attestation_document {
        object
            .key("AttestationDocument")
            .string_unchecked(&aws_smithy_types::base64::encode(var_240));
    }
    if let Some(var_241) = &input.key_encryption_algorithm {
        object
            .key("KeyEncryptionAlgorithm")
            .string(var_241.as_str());
    }
    Ok(())
}
